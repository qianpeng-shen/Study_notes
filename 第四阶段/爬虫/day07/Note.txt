RSA算法解决了一个信息传输的问题；
但是在加密体现中并不能保证通信的另一方
的合法性，所以我们需要有权威的机构来颁发
一个证书。
如果像12306这种网站没有通过权威机构来颁发
证书，而大家也认可它的情况下，我们
需要手动设置授权的合法性。

关系型数据库：
锁：表级锁，开销最小的策略，会锁定
整张表，会阻塞其他所有的读写操作；
读锁属于共享锁，读互相之间不会引起阻塞；
写锁的优先级高于读锁，在队列中，写锁
会被插入到读锁之前；
    行级锁：行锁可以支持最大程度上并发
处理，但同时增大锁开销；
比如MySQL：
		猫眼电影的数据比较适合在这种
	关系型数据库中存储；
	更利于将来的增删改查更加的方便和高效；
	将来我们做数据分析的时候方便的提取数据，
	做查询非常的高效，加锁，锁的粒度；
MySQL查询流程：
	1.客户端发送一条查询给服务器；
	2.服务器检查缓存，如果命中则直接返回；
	3.服务器进行SQL解析，预处理；
（如果需要做SQL的优化,需要了解这个
优化器是如何工作的，如何进行优化的）
	4.交给优化器生产一个执行计划；
	5.根据优化器生成的执行计划，调用
存储引擎的API执行查询；
    6.返回结果；

缺点：
    数据格式要求的严格性导致其不能
满足互联网数据发展的趋势；
数据库事务ACID，指数据库事务
正确执行的四个基本要素
的缩写。包含：
   原子性（Atomicity）：一个事务
被视为一个不可分割的最小单元；
   一致性（Consistency）：数据库
总是从一个已知状态转换到另一个一致性
状态，比如说数据库崩溃，数据的状态
不会发生变化；
   隔离性（Isolation）：一个事务
所做的修改在其最终提交前，对其他的事务
是不可见的；
   持久性（Durability）：一旦
事务提交，则所有的修改就要永久的保存到
数据库中，即使系统崩溃了，
数据也不会丢失；

CHAR VS VARCHAR:
	CHAR分分配固定长度的空间，使得结构
更加固定，尤其在UDPATE时，没有额外的开销，
对于很长的字符串，用CHAR会造成空间的浪费；
    VARCHAR可以分配变长的字符串，因为空间
更加紧凑，根据实际需要来，但是当一个页
满的情况下，UPDATE更新会造成很大的负担；
数据库实现的底层结构：
	B+ Tree；

目前来说，数据库的发展趋势已经是一种
多元化的趋势；
NO SQL: Not only SQL

HDFS <- GFS(big table)
MongoDB：
	比如新浪微博的数据，比较适合用MongoDB
这种数据库来存储；

1）作业使用Python来实现：
微博上有个用户A,A1,A2,B1,B2等; 
微博上有个用户B,A1,B1,C1,C2等；
    当B要关注A时，我们希望找出
A，B在微博上都关注的人；

CAP理论：
	CAP原则又称CAP定理，
指的是在一个分布式系统中，
Consistency（一致性）、 
Availability（可用性）、
Partition tolerance（分区容错性），
三者不可得兼
分布式系统的CAP理论：理论首先把分布式
系统中的三个特性进行了如下归纳：
● 一致性（C）：在分布式系统中的
所有数据备份，在同一时刻
是否同样的值。（等同于所有节点访问
同一份最新的数据副本）
● 可用性（A）：在集群中一部分节点故障后，
集群整体是否还能响应客户端的读写请求。
（对数据更新具备高可用性）
● 分区容错性（P）：以实际效果而言，
分区相当于对通信的时限要求。
系统如果不能在时限内达成数据一致性，
“就意味着发生了分区的情况，
必须就当前操作在C和A之间做出选择。 
《7周7数据库》

面试题：
	1)有两个机房，这两个机房里放着一样
多的机器。A机房里每台机器上存着
不同的数据；
B机房里每台机器分别是A机房中某台机器
数据的备份；
有一天，A机房里某台机器出故障了，
怎么样快速的把这台机器的数据恢复过来。
Input：
   listA: 1 2 3 4 6 7 8 9
   listB: 1 2 3 4 7 8 9
Output：
   5  
如果不是一台，而是多台机器出问题，怎么办？
   X1+X2+X3+X5...+XN = Y
      X4 = Y - (X1+X2+X3...+XN) 
   X1+X2+...+X5+XN = Y
   X1*X2*...*X5*XN = Z
    2)Python中怎么把一个list
中重复的元素去掉？
你最多能想出几种解决方法？
Input: 1 2 3 2 4 1 5
Output: 1 2 3 4 5

自己封装一个pymysql.py:
在这里需有一个DBHelper，

CREATE DATABASE testdb DEFAULT charset utf8;
如果创建数据库时忘记更改其编码类型为utf8，
可以采用下面的修补措施：
#表改成utf8
ALTER TABLE testdb.maoyan character set utf8;
#字段改成utf8
ALTER TABLE testdb.maoyan change title title 
varchar(20) character set utf8;

在数据分析时，我们需要对要分析的数据首先 
做预处理，如果发现有些数据不全：
1）可以给一个默认值；
2）丢掉这个数据，不用了；
3）可以通过机器学习的方法来填补一个默认值；

广度优先遍历，深度优先遍历：
	DFS:
	  def dfs(tree_node):
	     if tree_node is not None:
		    print(tree_node.value)
		    if tree_node.left is not None:
			   dfs(tree_node.left)
			if tree_node.right is not None:
			   dfs(tree_node.right) 
	BFS:
	  def bfs(tree_node):
	    if tree_node is None:
		   return
		
		# 创建一个队列
		queue = []
		node = tree_node
		queue.append(node) #从底部入队列
		while queue: #判断队列是否为空
		   node = queue.pop(0)
		   print(node.value)
		   if node.left is not None:
		      queue.append(node.left)
		   if node.right is not None:
		      queue.append(node.right)	  
		
		































	